javascript最初的目的：判断客户端的输入
javascript现在的意义：
	-页面特效（PC端的网页效果）
	-移动端（移动Web和APP）
	-异步和服务器交互
	-服务端开发（nodejs）
浏览器如何工作的：
	由用户界面--网络，发送获取数据请求（数据储存）--显示请求内容（渲染引擎（HTML+CSS解析器）(JavaScript解析器)）--解析完成浏览器引擎（用来查询和操作渲染引擎）--返回用户界面
	(用户界面)UserInterface--
	(网络)Networking--
	(HTML+CSS解析器)Rendeing engine--
	(javascript解析器)JavaScript interpreter--
	(Ui后端，用来绘制组合框和弹出窗口)UI Backend--
	(数据持久化，数据储存)Data Persistence--
	(浏览器引擎)Browser engine--
	(返回用界面)User Interface
外部引入JavaSpcript:
	<script src="文件地址/文件名.js"></script>
script标签属性：
	<script src="mengge.js" type="text/javascript"></script>

	<script src="mengge.js" async="async"></script>
	异步下载外部js文件，不影响其他页面操作，只要js文件下载完就立即执行	

	<script src="mengge.js" defer="defer"></script>
	脚本延迟到所有文档都被解析和显示后再执行，只有外部脚本可以使用

javascript分三部分：
	ECMAScript 标准： JS基本语法
	DOM:Document Object Model 文档操作模型----操作页面元素
	BOM：Browser Object Model 浏览器对象模型-----操作的是浏览器
变量：
	变量的声明：var a；
	变量的赋值：a = 10；
	变量的初始化：var a = 10；

	规则：	1・由字母，数字，下划线，$组成
		2・不能是关键字和保留字
		3・区分大小写
	规范:	
		1・变量名要有意义（一般都用英文单词）
		2・遵守驼峰命名法	如：userName
六大基本类型：
	1）数值类型：		number
	2）字符或字符串类型：	string
	3）布尔类型：		boolean
	4）未定义类型：		undefined
	5）空类型：		null
	6）对象类型：		object
 JS拥有动态类型，变量根据[赋值的类型]不同，而表现不同的类型。
	console.log(typeof 变量名)；	查看变量的类型
js运算符：
	1）【typeof】	查看运算符
	2）  【=】	赋值运算符
	3）【==】【===】判断是否相等运算符
		【==】简要比较运算符：表示判断两个变量的值是否相等【忽略变量的类型】，返回布尔值；
		【===】严格比较运算符：表示判断两个变量的值是否相等【包括变量的类型】，返回布尔值；
	x>>=y		//按位右移符号，相当于x= x>>y
	x<<=y		//按位左移符号，相当于x= x<<y
	x>>>=y		//相当于x= x>>>y
注释：
	单行注释：//	写在加注释的代码的末尾
	多行注释：/*...*/写在加注释的代码段的开头位置
	文档注释：/**...*/写在代码块的前面
布尔运算符：
	非运算符（!） 		表达式的值为假的时候，运算结果为真
	与运算符（&&）		当运算符两端的表达式值均为真时，运算结果为真，否则为假
	或运算符（||）		当运算符两端的表达式值有一个为真，运算结果为真，都为假时结果才假
算数运算符：
	+(加法)
	-(减法)
	*(乘法)
	/(除法)
	%(取余)
    特殊功能：
		+（加法）：从左到右运算，如果加号两端中有一端不是数字，那么先将数字转换成字符串形式【相拼接】
		剩下所有运算符（-*/%）：如果符号两端中有一端不是数字，那么先将不是数字的内容转换成数字，再进行计算
					如果不是数字的内容无法转换成数字，则结果是NAN（not a nomber）
三目运算符：? :
		判断表达式的结果，从而根据结果选择执行不同的语句
	语法：表达式1 ? 表达式2 ：表达式3；

	首先计算表达式1的布尔值，如果是true，那么返回表达式2
				 如果是false，那么返回表达式3

字符串的转换方式：
	string，tostring, 还有加号（+）
		tostring可以把任意类型转换成字符串
	a.测量字符串长度：length方法	
	b.字符索引：[]方法	
	c.获取指定位置字符：charAt()方法和charCodeAt()方法
		charAt返回的是具体的字符
		charCodeAt返回的是字符对应的Unicode编码	
	d.字符串连接：concat()方法:
		concat()方法能够将两个字符串拼接起来，合成一个新的字符串,认为concat和+作用相同.
字符串的属性和方法：
	1).length------------------------------------返回字符串长度
	2).charAt（number）-------------------------返回当前指定位置的字符
	3).charCodeAt：
	4).concat------------------------------------连接字符串
	(5).substring-------------------------------截取字符串
	(6).substr----------------------------------截取字符串（长度）
	(7).slice-----------------------------------截取字符串。
	(8).indexOf---------------------------------返回当前查找字符串的位置，如果没有返回-1，
		语法：str.indexOf(‘subStr’);
	(9).lastIndexOf-----------------------------倒过来查找，查找失败则返回-1.
		语法：str.lastIndexOf(‘subStr’);
	(10).trim-----------------------------------去掉字符串两端的空格，
		语法：str.trim();
		trim方法并不会对原本字符串产生任何影响，而是会生成一个新的字符串。
	(11).toUpperCase和toLowerCase----------------大和小写转换
		大写语法：str.toUpperCase();
		小写语法：str.toLowerCase();
	(12).localeCompare---------------------------比较两个字符串大小
		语法：str1.localeCompare(str2);
	(13).match------------------------------------返回一个指定字符串的数组
		语法：str.match(substr);
		match方法的作用是查找原字符串是否匹配某个子字符串，返回结果是匹配的子字符串数组，如果没有找到则返回null。
		注意的是match方法只能匹配到寻找到的第一个字符串。
	(14).search-------------------------------------返回位置
		语法：str.search('subStr');
		返回结果为下标。如果没有找到匹配字串，则返回-1。
	(15).replace---------------------------------替换字符串
		语法：str.replace(oldString,newString);
		将【查找到的第一个指定字符串】替换成【目标字符串】。如果查找失败则不发生替换，而是将原字符串复制一份拷贝，生成一个新的字符串
	(16).split------------------------------------字符串切割，返回数组
		语法：str.split(symbol);
		根据指定的符号将字符串进行分割，分割后的每一个子元素整合成一个数组返回。
		如果无法分割，那么返回的数组只有一个元素，这个元素就是字符串本身。
			ps：split方法最后会返回一个数组。
			pss：分割的符号不同，得到的结果也不同。
javaScript使用Unicode字符集:
	\n 换行符	（\u000A）
	\' 单引号	（\u0027）
	\" 双引号	（\u0022）
	\ 反斜杠	（\u005C）
字符串的加密和解密：
	解析非中文：发送数据时字符个数占一位 
		btoa()字符串或二进制数值转换为Base64编码（加密）
		atob()Base64编码转换为原来的编码（解密）
	解析中文：发送数据时字符个数占二位
		encodeURLComponent(加密)
		decodeURLComponent(解密)



常见转义字符有：
	\'		单引号
	\"		双引号
	\\		反斜杠
	\n		换行
	\r		回车
	\ttab	(制表符)
	\b		退格符
	\f		换页符
	总结：	\r\n表示源代码换行。
		<br/>表示浏览器文字换行
数值转换的方法：
	number，
	parseInt（）转换成整数，参数为两个时：parseInt（"A",16）后面色数字表示十六进制；
	parseFloat（）转换成浮点数；
boolean类型转换：
	空字符串，0，NAN(不是一个数字)，null，undefined-------都转换成false;(都没有具体值)
	var a = !!"123"	表示布尔值取反；
undefined & null：未定义类型&空类型
	undefined类型和null类型在页面中表现的效果是相同的，但是undefined用于变量类型，而null用于对象类型。两者必须不能混用！！！！
object 对象类型：
	对象属性有两种不同寻址方式（获取对象属性所对应的值的方式）：
		name=person.lastname;
	 	name=person["lastname"]; 

运算符：
	typeof	获取当前变量类型运算符（特殊）
	《++和--相同》
	++a；表示先执行a = a + 1;表达式返回a的值
	a++；表示先返回a的值，再执行a = a + 1
运算符的优先级：
	()		特殊运算符
	++  --  ！	一元运算符
	先 * / % 后 + - 算数运算符
	> >= < <=	关系运算符
	== != === !===	相等运算符
	先&& 后||	逻辑运算符
判断语句：
	if（条件）{}
		else if（条件）{}
	switch（判断是否先等）{
		case 需要比的值：
		break；
		}
		注意：break可以省略，如果省略代码会执行下一个case
			swith比较是用===全等于操作符，因此不会发生类型转换
switch语句和if语句表达的含义基本相同。其实switch语句很像if else if else结构。	
	语法：switch（表达式）{				
		case 结果1：{执行语句1}；					
		break;				
		case 结果2：{执行语句2}；
		break;				
		default：{执行语句3};	//以上都不成立的话执行default
		}

循环语句：
	用for循环，	当已知循环次数时
		break;终止for循环
		continue；跳出本次循环，继续下次循环
	用while和do while	当循环次数不确定的时候
		while循环是先判断条件，再循环
		do while 是先循环，再判断条件
		语法：while (表达式){			
			语句；		
		}
数组：	var array = ["shimeng","yangxiaohui","shishourui"]
	数组是有序的、类型可以是任意的、一组数。
	数组的长度是 array.length
	var array = [];创建一个空数组，字面量数组
	var array = new Array();创建一个数组对象
	var array = [4];创建一个长度为4的数组
	var array = [3, 4, 5, 6];创建一个包含有4个元素的数组
数组的方法：
	javascript为数组提供了很多方法，方便开发者更好的使用数组。	
		(1)isArray:判断是否为数组
		(2)valueOf:返回数组本身
		(3)toString:将数组以字符串的形式返回
		(4)push:向数组末尾追加数据,返回当前数组的长度
		(5)pop:删除数组最后一个元素
		(6)join:将数组转换为字符串，默认按逗号隔开
		(7)shift(): 在数组头部删除一个元素
		(8)unshift():在数组头部添加一个元素
		(9)reverse():数组反转
		(10)slice:数组截取
		(11)splice:数组截取，并且可以插入新的元素(改变原数组)
		(12)sort：排序
		(13)indexOf:索引
		(14)lastIndexOf:反序索引

函数：
	函数可以封装一段javaScript代码，定义一次，可被执行或调用多次；
	定义：
		function functionName(形参1， 形参2， 形参3...) {
			//函数体
		}
	函数的调用：functionName (实参1， 实参2， 实参3...);


函数的形式：
	无参数，无返回值
	有参数，有返回值
	无参数，有返回值
	有参数，无返回值
函数的三要素：
	1）函数的功能
	2）函数的参数
	3）函数的返回值
		如果return 后面跟内容了，就返回后面的内容；
		如果return 后面没有跟内容，就返回undefined;
		如果函数内部没有写return， 返回undefined;
推荐的做法：要么让函数始终都返回一个值，要么永远都不返回值

参数：
	在javascript中实参的个数和形参的个数可以不之一致；
	当调用函数外面的实参时，会把实参复制一份传递给函数里面的形参；
	在JavaScript中不允许有同名的函数；（没有重载）

函数两种定义方式：
	1)函数的声明：函数的提升
		function fnName（a, b）{
			return a + b;
		}
		console.log(fnName(1, 2));
	2)函数的表达式：变量的提升
		var fnName = function (a, b){
			return a + b;
		};//分号必须加
		console.log(fnName(1, 2));
函数内部，获取变量的时候，会在当前的作用域找，有没有变量声明，如果有就返回当前作用域中的变量的值（没有赋值就是undefined）
如果当前作用域中没有对应变量的声明，会去上一级作用域找变量的值；

变量的作用域：
	1)全局作用域：
		全局变量：
			在任何位置都可以访问；
		不使用var 定义的变量都是全局变量；
	全局变量只有关闭网页或者浏览器时，才会销毁
	2)局部作用域：
		局部变量：
			在函数内部声明一个变量，只能在函数内部使用；
			当变量超出作用域的时候，会被销毁（垃圾回收机制）

在if和for中定义的var变量是全局变量

JavaScript中没有块级作用域；
匿名函数：
	var myFun = function (){
	}
自调用函数：只能执行一次不值得给个函数名，用小括号括起来即可
	好处：不会和外部变量命名冲突；
	(function (){
		console.log("自调用函数");
	})();

递归：
	函数内部自己调用自己；
	//用递归求n个数的累加
      	 思路：假如n = 5；等待下面完成，逐步往上返回下面的值，相加
                5 + getSum(4)
                    4 + getSum(3)
                        3 + getSum(2)
                            2 + getSum(1)
1，函数是这一种数据类型
2，函数即可作为另一个函数的参数，又可以作为另一个函数的返回值；
创建对象：
如 var hero = new Object();
	1・构造函数的命名：第一个字母要大写
	2・在内存中开辟空间，创建一个对象，这个对象没有属性和方法
	3・返回刚刚创建的函数
函数和方法的区别：
	函数：直接调用的是函数 alart();
	方法：通过对象调用的是方法 hero.attack();
对象是一个无序属性（对象的属性和对象的方法）的集合：
	属性可以包含基本值，对象和函数
构造一个函数：目的是创建一个对象
        * 1,在内存开辟空间，存储新创建的对象 new Object();
        * 2,并把this设置为当前的对象
        * 3，执行函数内部代码，设置属性和方法
        * 4，返回新创建的对象
对象的字面量：
	var arr = [];数组的字面量
	var arr = new Array ();使用构造函数创建数组
	var o = new Ojbect();使用构造函数创建对象
	//对象的字面量
	var o = {
		键 ： 值，
		name : "shimeng",
		age : 18,
		dog : {},
		cats : [],
		sayHi : function () {
			console.log("大家好：我是" + this.name);
		}
	};
JSON就是JavaScript Object Notation(JavaScript对象的表现形式)：JavaScript的子集
	JSON是描述数据的一种规范
	JSON的属性(键)必须用引号或双引号引起来，而对象的字面量可以省略；
for in 输出（遍历）对象的属性和方法：
	for (var key in arr) {
		（key 对象的属性（键））
		console.log(key);
	}
基本类型和引用类型：
	（简单类型）基本类型有：
		Number, String, Boolean, Undefined, Null
	（复杂类型）引用类型：
		Object, Array, Date, function, 函数，等。

DOM：文档对象模型（文档树模型），是一套操作html和xml文档的API(接口)
事件三要素：
	事件源――――事件的触发者
	事件处理程序-――――如onclick == 匿名函数
	事件的名称――――如click
方法：
	onclick：点击事件
	onfocus：获取焦点事件（也就是获取文本框里内容）
	onblur：失去焦点事件（也就是失去文本框里内容）
规律：

	1）凡是CSS中这个属性是多个单词的的写法，在JS代码中DOM操作的时候吧“-”去掉，后面的单词的首字母大写即可
	2）innerText：凡是成对标签，中间文本内容，设置的时候，都使用innerText这个属性的方式
	3）无论获取的是一个标签，还是多个标签，最终都是在数组中存储的，这行代码的返回值就是一个数组
	4）在某个元素的事件中，自己的事件中的this就是当前这个元素对象
	5）在表单标签中，如果属性和值只有一个，并且值是这个属性的本身，那么在写JS代码，DOM操作时，这个属性值是【布尔值】即可
	6）在JS代码中DOM操作的时候，设置元素的类样式，不用class关键字，应该使用className。
		例子如：
			获取body标签元素，用三元运算符表达式
        		document.body.className = document.body.className != "cls" ? "cls" : "";

兼容：	
innerText 和 textContent的区别：
	1・设置标签中的内容，应该使用textContent属性，谷歌，火狐都支持，IE8不支持
	2・设置标签中的内容，应该使用innerText属性，谷歌，火狐，IE8都支持，低版本的可能不支持
	3・如果这个属性在浏览器中不支持，那么这个属性的类型是undefined
		判断这个属性的类型，是不是undefined，就知道浏览器支不支持了
	列如：
		设置任意标签中间的任意内容
			function setInnerText(自己起的名) (element, text) {
				//判断浏览器是否支持这个属性
				if (typeof element.textContent == "undefined") {//不支持的话
					element.innerText = text;
				}else {//支持的话
					element.textContent = text;
				}
			}
		获取标签中间的文本内容
				  (自己起的名)
			function getInnerText (element) {
				if (typeof element.textContent == "undefined") {
					return element.innerText;
				}else {
					return element.textContent;
				}
			}

如果想要（获取）标签及内容，使用innerHTML;
如果想要设置标签，使用innerHTML；
想要设置文本，用innerText,或者textContent,或者innerHTML；
设置自定义属性：	setAttribute ("属性的名字"，"属性的值");
获取自定义属性的值：	getAttribute ("属性的名字");
移除自定义和自带的属性：removeAttribute ("属性的名字");



1）根据id属性的值来获取元素，返回来的是一个元素对象
	document.getElementById("id的属性值")；
2）根据标签的名字获取元素，返回来的是一个伪数组，里面保存了多个DOM对象
	document.getElementsByTagName("标签的属性值")；

下面的几个，有的浏览器不支持

3）根据name的属性值获取元素，返回来的是一个伪数组，里面保存了多个DOM对象
	document.getElementsByName("name的属性值")；
4）根据类样式的名字获取元素，返回来的是一个伪数组，里面保存了多个DOM对象
	document.getElementsByClassName("类样式的名字")；
5）根据选择器获取元素，返回来的是一个元素的对象
	document.querySelecter("选择器的名字");
6）根据选择器获取元素，返回来的是一个伪数组，里面保存了多个DOM对象
	document.querySelecterAll("选择器的名字");


节点(Node)：页面中的所有的内容都是节点。包括：标签，文本（文字），属性，空格，换行
节点属性的作用：
	为了将来获取很多节点，得到节点中的标签（元素），识别节点中的标签元素
节点类型：标签节点（1）， 属性节点（2）， 文本节点（3）
nodeType： 1-----标签节点， 2------属性节点，  3-------文本节点
nodeName：标签节点（大写的标签名字）， 属性节点（小写的属性名字）， 文本节点（#text）
nodeValue： 标签（null）， 属性（属性值）， 文本（文本内容）
	


	


12行代码：

//凡是获取节点的代码在谷歌和火狐得到的都是----------相关的节点
//凡是获取元素的代码在谷歌和火狐得到的都是----------相关的元素
//从子节点和兄弟节点开始，凡是获取节点的代码在IE8中得到的是元素，
//			获取元素的相关代码，在IE8中搜不支持（都是undefined）

	父节点：	console.log(objct.parentNode);
	父元素：	console.log(objct.parentElement);
	子节点：	console.log(objct.childNodes);
	子元素：	console.log(objct.children);

	第一个子节点：	console.log(objct.firstChild);
	第一个子元素：	console.log(objct.firstElementChild);
	最后一个子节点：console.log(objct.lastChild);
	最后一个子元素：console.log(objct.lastElementChild);
	某个元素的前一个兄弟节点：console.log(objct.previousSibling);
	某个元素的前一个兄弟元素：console.log(objct.previousElementSibling);
	某个元素的后一个兄弟节点：console.log(objct.nextSibling);
	某个元素的后一个兄弟元素：console.log(objct.nextElementSibling);

封装节点的兼容代码：

//获取任意一个父元素的第一个子元素
    function getFirstElementChild (element) {//获取父元素的第一个子元素（参数是父元素）
			//火狐和谷歌支持元素查找	
			//判断父元素下的第一个子元素的布尔值
        if (element.firstElementChild) {//如果是true，直接返回这个元素
            return element.firstElementChild;
        }else {
			//在IE8或者其他浏览器不支持查找元素时，按节点查找；
            var node = element.firstChild;
			 //把node放在while循环小括号里证明node是有意义的（存在的） 并且&& 不是标签
            while (node && node.type != 1) {
			//不是标签，要继续寻找下一个节点是不是标签
                node = node.nextSibling;
            }
		//如果找到标签，直接返回这个节点
            return node;
        }
    }
 元素的创建:三种方式
	第一种：document.write("标签的代码和内容");
		缺陷：如果在【页面加载完毕后】，通过此方式创建页面元素，那么页面上存在的所有内容全部被干掉（没了）；
		优点：也可以可以嵌入外部广告，内容
	第二种：对象 .innerHTML = "标签代码及内容";
		
	第三种：document.createElement("标签的名字");
		把创建的子级元素追加到父级元素中

方法：

父元素 = my$("div");

子元素 = newObjct;

父元素追加子元素：
		my$("div").appendChild(newObjct);
把新的子元素【插入】到第一个子元素【前面】：
		my$("div").insertBefore(newObjct, my$("div").fristElementChild);
把新的子元素替换旧的子元素：
		my$("div").replace(newObjct,refChild【旧的子元素】);

移除父元素的第一个子元素：
		my$("div").removerChild ( my$("div").fristElementChild );

判断父级元素中有没有第一个子元素,【循环删除所有子元素】：
		while (my$("div").fristElementChild) {
			my$("div").removerChild (my$("div").fristElementChild);
		}

事件三个阶段：
	1.事件捕获阶段：从外向里------------------true
	2.事件目标阶段：最开始选择的那个
	3.事件冒泡阶段：从里向外------------------false


绑定事件：
	1）对象.addEventListener（ 【事件类型】没有“on”的事件名字， 事件处理函数， 控制事件的阶段）------------绑定多个事件（谷歌和火狐支持）
	2）对象.attachEvent（【事件类型】有“on”的事件名字， 事件处理函数）-----------------绑定多个事件（IE8支持）
	3）对象.oncolck--------------------绑定单个事件

	区别：
		相同点：都为元素绑定事件
		不同点：
			1）方法名不一样
			2）参数个数不一样addEventListener三个参数，attachEvent两个参数
			3）addEventListener：火狐，谷歌，IE11支持，IE8不支持
				attachEvent：IE8支持，火狐和谷歌和IE11不支持
			4）this不同，addEventListener中的this是当前绑定事件的对象
				attachEvent中的this是window
			5）addEventListener中的事件类型（事件的名字）没有“on”
				attachEvent中的事件类型（事件的名字）有“on”
解绑事件：
	注意：用什么方式绑定事件，就用什么方式解绑
	1.解绑事件
		对象.on事件名字 = 事件处理函数 -----------------绑定事件
		对象.on事件名字 = null；
	2.解绑事件
		对象.addEventListener (没有“on”的事件类型， 命名函数， false)；------------绑定事件
		对象.removeEventListener (没有“on”的事件类型， 函数名字， false)；------------解绑事件
	3.解绑事件
		对象.attachEvent (“on”事件类型， 命名函数， false)；------------绑定事件
		对象.detachEvent (“on”事件类型， 命名函数， false)；-------------解绑事件
事件冒泡：多个元素嵌套，有层次关系，这些元素都注册了相同的事件，如果里面的事件触发了，外面元素的该事件自动触发
阻止事件冒泡：
		对象.方法
	事件参数对象.stopPropagation();			谷歌和火狐支持，IE8不支持
事件参数对象在IE中没有，所以以window.enent代替
		对象.属性
	window.enent.cancelBubble = true;	IE特有，谷歌支持，火狐不支持




BOM事件：【重要】	window.onload = function() {};

	只要页面中所有的内容加载完毕，这个事件就会触发-------------页面中所有的内容，标签，属性，文本，包括引入的js文件



location对象：--------地址栏上的地址操作
	console.log(window.location.hash)-------------------地址栏上#及后面的内容
	console.log(window.location.host)-------------------主机名及端口
	console.log(window.location.hostname)-------------------主机名
	console.log(window.location.pathname)-------------------文件的路径，相对路径
	console.log(window.location.prot)-------------------端口号
	console.log(window.location.hash)-------------------协议
	console.log(window.location.hash)-------------------搜索的内容

设置跳转的页面地址：因为是window的顶级元素，所以省略了window.location.href = "跳转的页面地址"
	【重要】1. location.href = "跳转的页面地址";----------属性

		2. location.assign("跳转的页面地址");---------方法

	location.reload();-------------------------------------重新加载（刷新）
	location.replace("跳转的页面地址");---------替换地址栏上的地址，没有历史记录
history对象：--------历史记录的前进和后退，有历记录才能有效
	window.history.back();----------------后退
	window.history.forward();---------------前进
	window.history.go(正数或负数);------------正数表示前进，负数表示后退
navigator对象：------------获取浏览器和系统的信息
	console.log(window.navigator.userAgent);----------获取用户浏览器的类型
	console.log(window.navigator.platform);-----------获取浏览器所在的系统平台（如win32位）
定时器：
	执行过程：页面加载完毕后，过一段时间执行函数，反复的，除非清理定时器
	var timeId = window.setInterval(函数， 时间(毫秒));
清除定时器：清理定时器的ID值
	window.clearInterval(timeId);
一次性定时器：
	var timeId = window.setTimeout(函数,时间);
清除一次性定时器：
	window.clearTimeout(定时器ID值);

三大系列：
	元素样式属性是无法直接通过：对象.style.属性 来获取（样式在style属性中设置）

	offset系列：获取元素相关的样式属性的值
		对象.offsetWidth-------------获取元素的宽（有边框）
		对象.offsetHeight-----------获取元素的高（有边框）
		对象.offsetLeft-------------获取元素距离左边位置的值（有边框）
		对象.offsetTop--------------获取元素距离上边位置的值（有边框）
		对象.offsetParent------------获取元素父级的
	
	scroll系列：卷曲出去的值
		对象.scrollWidth-------------元素中内容的实际宽度
		对象.scrollHeigth------------元素中内容的实际高度
		对象.scrollTop---------------向上卷曲出去的距离
		对象.scrollLeft--------------向左卷曲出去的距离
		
	client系列：可视区域
		对象.clientWidth--------------可是区域的宽（无边框），边框内部的宽度
		对象.clientHeight--------------可视区域的高（无边框），边框内部的高度
		对象.clientLeft----------------左边框的宽度
		对象.clientTop-----------------上边框的宽度
		对象.clientX-------------------可视区域的横坐标
		对象.clientY-------------------可视区域的纵坐标




扩展事件：
	页面关闭之前触发的事件:		window.onberforeunload = function() {};
	页面关闭之后触发的事件：	window.onunload = function() {};





扩展：
XML:侧重于存储数据
HTML:展示信息，数据
文档：一个页面就是一个文档
元素(Element)：页面中所有的标签都是元素，所有的元素都可以看成对象

//    1到1000的随机整数
    var x = parseInt(Math.random() * 1000 + 1);
    var y = parseInt(Math.random() * 1000 + 1);
回调函数：当一个函数作为参数时就是回调函数






